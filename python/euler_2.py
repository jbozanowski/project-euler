# -*- coding: utf-8 -*-

# Problem 2 - Even Fibonacci numbers

# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.


def euler_2():
    def fib_sum_even_till_max(a, b, sum_even, max_term):
        if b > max_term:
            return sum_even
        if b % 2 == 0:
            sum_even += b
        return fib_sum_even_till_max(b, a+b, sum_even, max_term)

    MAX_TERM = 4000000
    sum_even = 0
    return fib_sum_even_till_max(1, 2, sum_even, MAX_TERM)


if __name__ == '__main__':
    assert euler_2() == 4613732
